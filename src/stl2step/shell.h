/**
 * \file
 *
 * \brief Заголовочный файл с объявлениями классов трёхмерных фигур
 *
 * Классы из этого файла используются для описания трёхмерных фигур.
 * Это вершины, рёбра, границы, грани, фигуры. Классы этих примитивов содержат списки
 * указателей для обращения к объектам геометрически связанных классов.
 * Такие списки позволяют осуществлять эффективные операции
 * со списками примитивов, не прибегая к сравнению
 * "каждый с каждым", приводящему к квадратичной сложности операций.
 */

#ifndef _SHELL_H
#define _SHELL_H

#include "err.h"
#include "geometry.h"

namespace prim3d {

  /**
   * \brief Базовый класс для определения геометрических примитивов
   *
   * Этот базовый класс используется для определения классов
   * вершин, рёбер, границ, граней и фигур.
   */
  class primitive {

  private:

    /**
     * \brief метка (указатель), которой будет помечен этот примитив.
     */
    mutable const void* mark; //-V122_NOPTR

  public:

    /**
     * \brief Конструктор по умолчанию
     */
    primitive();

    /**
     * \brief Пометить примитив меткой
     *
     * \param [in] ptr метка (указатель), которой будет помечен примитив
     */
    void set_mark(const void* ptr) const;

    /**
     * \brief Снять с примитива метку
     */
    void reset_mark() const;

    /**
     * \brief Проверить, помечен ли примитив
     *
     * \retval true если примитив помечен
     * \retval false если примитив не помечен
     */
    bool is_marked() const;

    /**
     * \brief Получить метку, котрой помечен примитив
     *
     * \return метку, которой был помечен примитив, или nullptr, если этого не было
     */
    const void* get_mark() const;
  };

  class edge;
  class face;
  class shell;

  /**
   * \brief Класс для определения вершины полигональной сетки
   * 
   * Вершина - это трёхмерная координата (трёхмерный вектор), определяющий положение
   * вершины в пространстве. Вершина является общей для трёх или более граней.
   * Вершина является общей для трёх и более рёбер.
   */
  class vertex : public primitive {

  private:

    /**
     * \brief Координата (трёхмерный вектор) вершины в простанстве
     */
    geometry::vector coord;

    /**
     * \brief Список указателей на рёбра фигуры, включающих данную вершину.
     */
    std::vector<const edge*> edges;

  public:

    /**
     * \brief Конструктор вершины по умолчанию
     */
    vertex();

    /**
     * \brief Конструктор вершины из координаты
     *
     * \param [in] v устанавливаемая координата вершины.
     */
    vertex(const geometry::vector& v);

    /**
     * \brief Получить координаты вершины
     *
     * \return вектор, определяющий координаты вершины в пространстве.
     */
    const geometry::vector& get_coord() const;

    /**
     * \brief Установить координаты вершины
     *
     * \param [in] v вектор, определяющий координаты вершины в пространстве.
     */
    void set_coord(const geometry::vector& v);

    /**
     * \brief Сравнение координат вершин (равно)
     *
     * \param [in] v вершина, с которой происходит сравнение
     * \retval true если координаты вершин равны с точностью EPSILON_X;
     * \retval false если координаты вершин не равны.
     */
    bool operator==(const vertex& v) const;

    /**
     * \brief Сравнение координат вершин (меньше)
     *
     * Такое сравнение нужно для выполнения однозначной
     * сортировки, которая используется, например, при
     * сравнении двух списков вершин.
     *
     * \param [in] v вершина, с которой происходит сравнение
     * \return результат сравнения координат вершин
     */
    bool operator<(const vertex& v) const;

    /**
     * \brief Получить константную ссылку на список указателей на рёбра фигуры,
     * включающих данную вершину.
     *
     * \return константную ссылку на список указателей на рёбра фигуры,
     * включающих данную вершину.
     */
    const std::vector<const edge*>& get_edges() const {
      return edges;
    }

    std::vector<const edge*>& get_edges() {
      return edges;
    }


    /**
     * \brief Добавить указатель на ребро в список указателей на рёбра вершины
     *
     * \param [in] e указатель на ребро, принадлежащий к списку указателей на рёбра фигуры.
     */
    void add_edge(edge* e);

    /**
     * \brief Отладочный вывод информации о вершине
     *
     * \param [in] s указатель на фигуру, которой принадлежит вершина.
     * \return строку с текстом, содержащим информацию о вершине.
     */
    std::string print(const shell* s = nullptr) const;
  };

  /**
   * \brief Класс для определения рёбер полигональной сетки
   *
   * Ребро ссылается на две вершины. Направлением ребра считается
   * направление от начальной вершины к конечной.
   * Ребро всегда является общим для двух граней - левой и правой. Для левой грани
   * ребро всегда направлено в прямую сторону, а правой - в обратную.
   */
  class edge : public primitive {

  private:

    /**
     * \brief Указатель на начальную вершину ребра, принадлежащую списку вершин фигуры
     */
    const vertex* start_vertex; //-V122_NOPTR

    /**
     * \brief Указатель на конечную вершину ребра, принадлежащую списку вершин фигуры
     */
    const vertex* end_vertex; //-V122_NOPTR

    /**
     * \brief Указатель на грань в списке граней фигуры, находящуюся слева от ребра,
     * принадлежащую списку граней фигуры
     */
    const face* left_face; //-V122_NOPTR

    /**
     * \brief Указатель на грань в списке граней фигуры, находящуюся справа от ребра,
     * принадлежащую списку граней фигуры
     */
    const face* right_face; //-V122_NOPTR

  public:

    /**
     * \brief Конструктор из параметров
     *
     * \param [in] start указатель на начальную вершину ребра, принадлежащую списку вершин фигуры.
     * \param [in] end указатель на конечную вершину ребра, принадлежащую списку вершин фигуры.
     * \param [in] left указатель на грань в списке граней фигуры, находящуюся слева от ребра,
     * принадлежащую списку граней фигуры.
     *
     * Указатель на грань в списке граней фигуры, находящуюся справа от ребра, принадлежащую
     * списку граней фигуры, будет установлен при удалении лишней половины рёбер функцией
     * \ref prinm3d::shell::merge_edges() "shell::merge_edges()".
     */
    edge(const vertex* start, const vertex* end, const face* left);

    /**
     * \brief Получить указатель на начальную вершину ребра
     *
     * \return указатель на начальную вершину ребра.
     */
    const vertex* get_start() const;

    /**
     * \brief Получить указатель на конечную вершину ребра
     *
     * \return указатель на конечную вершину ребра.
     */
    const vertex* get_end() const;

    /**
     * \brief Получить указатель на грань, расположенную слева от ребра
     *
     * \return указатель на грань в списке граней фигуры, находящуюся слева от ребра,
     * принадлежащую списку граней фигуры.
     */
    const face* get_left() const;

    /**
     * \brief Установить указатель на грань, расположенную слева от ребра
     *
     * \param [in] f указатель на грань в списке граней фигуры, находящуюся слева от ребра,
     * принадлежащую списку граней фигуры.
     */
    void set_left(const face* f);

    /**
     * \brief Получить указатель на грань, расположенную справа от ребра
     *
     * \return указатель на грань в списке граней фигуры, находящуюся справа от ребра,
     * принадлежащую списку граней фигуры.
     */
    const face* get_right() const;

    /**
     * \brief Установить указатель на грань, расположенную справа от ребра
     *
     * \param [in] f указатель на грань в списке граней фигуры, находящуюся справа от ребра,
     * принадлежащую списку граней фигуры.
     */
    void set_right(const face* f);

    /**
     * \brief Отладочный вывод информации о ребре
     *
     * \param [in] s Указатель на фигуру, которой принадлежит ребро.
     */
    void print(const shell* s = nullptr) const;
  };

  /**
   * \brief Класс для определения направленного ребра полигональной сетки
   *
   * Этот класс расширяет свойства \ref prim3d::edge "класса ребра", добавляя
   * к нему свойство направления.
   * Так как ребро всегда принадлежит двум граням, оно входит в две границы,
   * принадлежащие двум разным граням. Для одной из границ ребро направлено
   * в прямую сторону, для другой - в обратную.
   */

  class oriented_edge {

  private:

    /**
     * \brief Указатель на это ребро в списке рёбер фигуры
     */
    const edge* base_edge; //-V122_NOPTR

    /**
     * \brief Направление ребра (true - прямое, false - обратное)
     */
    bool forward;

  public:

    /**
     * \brief Конструктор из параметров
     *
     * \param [in] e указатель на это ребро в списке рёбер фигуры.
     * \param [in] direction направление ребра (true - прямое, false - обратное).
     */
    oriented_edge(const edge* e, bool direction = true);

    /**
     * \brief Получить константный указатель на это ребро в списке рёбер фигуры
     *
     * \return константный указатель на это ребро в списке рёбер фигуры
     */
    const edge* get_base_edge() const;

//    /**
//     * \brief Получить указатель на это ребро в списке рёбер фигуры
//     *
//     * \return указатель на это ребро в списке рёбер фигуры
//     */
//    edge* get_base_edge();

    /**
     * \brief Получить направление ребра
     *
     * \retval true если направление ребра прямое;
     * \retval false если направление ребра обратное.
     */
    bool get_direction() const;

    /**
     * \brief Установить значение ориентированного ребра через параметры
     *
     * \param [in] e указатель на это ребро в списке рёбер фигуры.
     * \param [in] direction направление ребра (true - прямое, false - обратное).
     */
    void set(const edge* e, bool direction);

    /**
     * \brief Отладочный вывод информации о направленном ребре
     *
     * \param [in] s Указатель на фигуру, которой принадлежит ребро.
     */
    void print(const shell* s = nullptr) const;
  };

  /**
   * \brief Класс для определения границы грани
   *
   * Грань имеет внешнюю границу и может иметь несколько внутренних,
   * соответствующих отверстиям в грани. Граница состоит из цепочки направленных рёбер.
   */
  class border {

  private:

    /**
     * \brief Цепочка направленных рёбер, образующих границу
     */
    std::vector<oriented_edge> edges;

  public:

    /**
     * \brief Добавить ребро к списку рёбер границы
     *
     * \param [in] e добавляемое ребро.
     */
    void add_edge(const oriented_edge& e);

    /**
     * \brief Получить константную ссылку на цепочку направленных рёбер, образующих границу
     *
     * \return константную ссылку на цепочку направленных рёбер, образующих границу.
     */
    const std::vector<oriented_edge>& get_edges() const;

    /**
     * \brief Получить количество рёбер в списке рёбер границы
     *
     * \return количество рёбер в списке рёбер границы.
     */
    size_t edges_num() const;

    /**
     * \brief Удалить ребро из списка рёбер границы
     * \param [in] it итератор удаляемого ребра
     * 
     * \return итератор ребра, находящегося после удаляемого,
     * или итератор конца списка рёбер.
     */
    std::vector<oriented_edge>::iterator remove(std::vector<oriented_edge>::const_iterator it);

    /**
     * \brief Отладочный вывод информации о границе
     *
     * \param [in] s Указатель на фигуру, которой принадлежит граница.
     */
    void print(const shell* s = nullptr) const;
  };

  /**
   * \brief Класс для определения грани
   *
   * Грань имеет нормаль, определяющую ориентацию грани в составе полигональной поверхности.
   * Грань имеет внешнюю границу и может иметь несколько внутренних,
   * соответствующих отверстиям в грани.
   */
  class face : public primitive {

  private:

    /**
     * \brief Единичный вектор, определяющий нормаль грани
     */
    geometry::vector normal;

    /**
     * \brief Список из одной и более границ, образующих грань
     */
    std::vector<border> borders;

  public:

    /**
     * \brief Конструктор грани по значению нормали
     *
     * \param [in] n присваемое нормали значение
     */
    face(const geometry::vector& n);

    /**
     * \brief Сравнение граней
     *
     * \param [in] f грань, с которой происходит сравнение
     * \retval true если нормали и вершины граней совпадают с точностью EPSILON_X.
     * \retval false если нормали или вершины граней не совпадают.
     */
    bool operator==(const face& f) const;

    /**
     * \brief Получить нормаль грани
     *
     * \return вектор нормали
     */
    const geometry::vector& get_normal() const;

    /**
     * \brief Добавить границу к списку границ грани
     *
     * \param [in] b добавляемая граница.
     */
    void add_border(const border& b);

    /**
     * \brief Заменить список границ грани на указанный
     *
     * \param [in] new_borders новый список границ грани.
     */
    void set_borders(const std::vector<border>& new_borders);

    /**
     * \brief Получить константную ссылку на список границ грани
     *
     * \return константную ссылку на список границ грани.
     */
    const std::vector<border>& get_borders() const;

    /**
     * \brief Получить количество границ грани
     *
     * \return количество границ грани.
     */
    size_t borders_num() const;

    /**
     * \brief Отладочный вывод информации о грани
     *
     * \param [in] s указатель на фигуру, которой принадлежит грань.
     */
    void print(const shell* s = nullptr) const;
  };

  /**
   * \brief Класс для определения замкнутой трёхмерной фигуры, заданной полигональной поверхностью
   *
   * Фигура определена списком граней, составляющих замкнутую оболочку. Дополнительно фигура
   * содержит список рёбер, определяющих её грани и список вершин, определяющих эти рёбра.
   */
  class shell : public primitive {

  private:

    /**
     * \brief Список указателей на вершины, входящие в рёбра граней фигуры
     */
    std::vector<vertex*> vertexes;

    /**
     * \brief Список указателей на рёбра граней, входящих в фигуру
     */
    std::vector<edge*> edges;

    /**
     * \brief Список указателей на грани, образующие фигуру
     */
    std::vector<face*> faces;

    /**
     * \brief Координаты условного центра фигуры
     */
    geometry::vector pos;

    /**
     * \brief Указатель на фигуру, клоном которй является данная фигура, или nullptr
     */
    const shell* clone; //-V122_NOPTR

    /**
     * \brief Создать отдельную фигуру, состоящую из помеченных граней
     *
     * \param [in] marker метка, которой помечены грани
     * \return фигуру из помеченных граней
     *
     * Примитивы, перенесённые в новую фигуру, из исходной фигуры удаляются.
     */
    shell* split(const void* marker);

  public:

    /**
     * \brief Конструктор фигуры по умолчанию
     */
    shell();

    /**
     * \brief Конструктор фигуры из треугольных граней, заданных списком "нормаль и три вершины"
     *
     * \param [in] stlf плоский список, содержащий наборы из вектора нормали и координат
     * трёх вершин для каждой треугольной грани, образующей фигуру.
     */
    shell(const std::vector<geometry::vector>& stlf);

    /**
     * \brief Деструктор фигуры
     */
    ~shell();

    /**
     * \brief Получить константную ссылку на список вершин фигуры
     *
     * \return константную ссылку на список вершин фигуры.
     */
    const std::vector<vertex*>& get_vertexes() const;

    /**
     * \brief Получить количество вершин в списке вершин фигуры
     *
     * \return количество вершин в списке вершин фигуры.
     */
    size_t vertexes_num() const;

    /**
     * \brief Получить константную ссылку на список рёбер фигуры
     *
     * \return константную ссылку на список рёбер фигуры.
     */
    const std::vector<edge*>& get_edges() const;

    /**
     * \brief Получить количество рёбер в списке рёбер фигуры
     *
     * \return количество вершин в списке рёбер фигуры.
     */
    size_t edges_num() const;

    /**
     * \brief Получить константную ссылку на список граней фигуры
     *
     * \return константную ссылку на список граней фигуры.
     */
    const std::vector<face*>& get_faces() const;

    /**
     * \brief Получить количество граней в списке граней фигуры
     *
     * \return количество граней в списке граней фигуры.
     */
    size_t faces_num() const;

    /**
     * \brief Получить координаты условного центра фигуры
     *
     * \return координаты условного центра фигуры.
     */
    const geometry::vector& get_pos() const;

    /**
     * \brief Снять пометки со всех вершин фигуры
     */
    void unmark_vertexes() const;

    /**
     * \brief Снять пометки со всех рёбер фигуры
     */
    void unmark_edges() const;

    /**
     * \brief Снять пометки со всех граней фигуры
     */
    void unmark_faces() const;

    /**
     * \brief Удалить лишнюю половину рёбер.
     *
     * Из пары одинаковых, но встречно направленных рёбер оставить
     * только одно ребро. Одновременно для каждой грани скорректировать списки
     * ориентированных рёбер, заменив указатели удалённых рёбер. Также для каждого
     * ребра указать правую грань.
     *
     * \param [in] debug выводить отладочную информацию
     * \retval err_enum_t::ERROR_INTERNAL если обнаружены для одинаковых ребра, или
     * обнаружено помеченное встречное ребро, или заменяемое направленное ребро имеет
     * прямую направленность;
     * \retval err_enum_t::ERROR_OK в случае успешного завершения.
     */
    err_enum_t merge_edges(bool debug);

    /**
     * \brief Приведение координат вершин фигуры к условному центру.
     *
     * Операция, заключающаяся в вычислении координат условного центра,
     * как среднего арифметического координат вершин фигуры, и вычитании
     * этих координат из координат всех вершин для превращения их в относительные.
     * Эту операцию необходимо выполнять для всех фигур перед началом выявления
     * клонов в списке фигур. Также выполняется сортировка списка вершин.
     */
    void normalize_shell();

    /**
     * \brief Сравнение фигур
     *
     * \param [in] s фигура, с которой происходит сравнение
     * \retval true если все вершины фигур совпадают с точностью EPSILON_C;
     * \retval false если фигуры различаются.
     */
    bool operator==(const shell& s) const;

    /**
     * \brief Установить указатель на фигуру, клоном которой являеся данная.
     *
     * \param [in] ptr указатель на фигуру, клоном которой являеся данная.
     */
    void set_clone(const shell* ptr);

    /**
     * \brief Получить указатель на фигуру, клоном которой являеся данная фигура.
     *
     * \return указатель на фигуру, клоном которой являеся данная.
     */
    const shell* get_clone() const;

    /**
     * \brief Проверить, является ли фигура клоном
     *
     * \retval true если фигура является клоном
     * \retval false если фигура не является клоном
     */
    bool is_clone() const;

    /**
     * \brief Разделить грани фигуры по не связанным фигурам
     *
     * \return список фигур
     *
     * Распределить грани из списка фигуры по отдельным фигурам,
     * создать и заполнить внутренних структур новых фигур.
     * Из исходной фигуры разобранные по новым фигурам
     * примитивы удаляются.
     *
     */
    std::vector<shell*> separate();

    /**
     * \brief Объединить треугольные грани в многоугольные (первая часть объединения
     * граней в многоугольные)
     *
     * \param [in] debug выводить отладочную информацию
     */
    void merge_faces(bool debug);

    /**
     * \brief Удалить избыточные рёбра в многоугольных гранях (вторая часть объединения
     * граней в многоугольные)
     *
     * \param [in] debug выводить отладочную информацию
     * \retval err_enum_t::ERROR_INTERNAL если в формируемой границе грани
     * окажется меньше трёх рёбер;
     * \retval err_enum_t::ERROR_OK в случае успешного завершения.
     */
    err_enum_t reduce_edges(bool debug);

    /**
     * \brief Упорядочить рёбра в границы (третья часть объединения граней в многоугольные)
     *
     * Разобрать рёбра, наполняющие единственную границу,
     * по нескольком (при необходимости) границам, выстраивая
     * из них замкнутые цепочки.
     *
     * \param [in] debug выводить отладочную информацию
     * \retval err_enum_t::ERROR_INTERNAL если в исходной грани больше одной границы, или в границе
     * исходной грани меньше трёх рёбер, или если при разборе рёбер по границам не удалось
     * выстроить замкнутую цепочку рёбер;
     * \retval err_enum_t::ERROR_OK в случае успешного завершения.
     */
    err_enum_t split_edges_to_borders(bool debug);

    /**
     * \brief Отладочный вывод информации о фигуре
     */
    void print() const;

    /**
     * \brief Импорт информации о треугольниках из файла STL.
     *
     * \param [in] fname имя импортируемого файла
     * \param [out] faces список треугольных граней (4 вектора на грань - нормаль и три вершины)
     * \retval err_enum_t::ERROR_OK в случае успешного импорта;
     * \retval err_enum_t::ERROR_FILE_IO в случае ошибки ввода-вывода;
     * \retval err_enum_t::ERROR_IMPORT в случае ошибки при обработке импортируемого файла.
     */
    static err_enum_t import(const std::string& fname, std::vector<geometry::vector>& faces);
  };
}

#endif /* _SHELL_H */
